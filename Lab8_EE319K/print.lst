


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           ST7735_OutChar
   13 00000000                 IMPORT           ST7735_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000         
   17 00000000                 PRESERVE8
   18 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   19 00000000                 THUMB
   20 00000000         
   21 00000000 00000001 
              0000000A 
              00000064 
              000003E8 
              00002710 
              000186A0 
              000F4240 
              00989680 
              05F5E100 
              3B9ACA00 Powers  DCD              1, 10, 100, 1000, 10000, 100000
, 1000000, 10000000, 100000000, 1000000000
   22 00000028         
   23 00000028         
   24 00000028         ;-----------------------LCD_OutDec----------------------
                       -
   25 00000028         ; Output a 32-bit number in unsigned decimal format
   26 00000028         ; Input: R0 (call by value) 32-bit unsigned number
   27 00000028         ; Output: none
   28 00000028         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   29 00000028         ; R0 = the number
   30 00000028         ; R1 = temp 
   31 00000028         ; R2 = counter
   32 00000028         ; R3 = 2nd temp
   33 00000028         ; R4 = Powers (10^n)
   34 00000028         ; R5 = 10
   35 00000028         
   36 00000028         LCD_OutDec
   37 00000028 B53E            PUSH             {R1-R5,LR}  ;saving the registe
                                                            rs
   38 0000002A 4601            MOV              R1,R0       ;moving the number 
                                                            into R1 
   39 0000002C F04F 32FF       MOV              R2,#-1      ;initlize R2 for co
                                                            unting 



ARM Macro Assembler    Page 2 


   40 00000030 F04F 050A       MOV              R5,#10      ;initlize the divid
                                                            er
   41 00000034         DivBy10
   42 00000034 F102 0201       ADD              R2,#1       ;increment R2 by 1
   43 00000038 FBB1 F1F5       UDIV             R1,R5       ;unsigned divide R1
                                                             = R1/R5
   44 0000003C 2900            CMP              R1, #0      ;check to see if ri
                                                            ched the limit
   45 0000003E D1F9            BNE              DivBy10     ;loop till finished
                                                             counting 
   46 00000040         
   47 00000040 4C46            LDR              R4, =Powers ;R4 = &Powers
   48 00000042 EA4F 0182       LSL              R1,R2,#2    ;R1 = R2*4
   49 00000046 590C            LDR              R4,[R1,R4]  ;R4 = Max power 
   50 00000048         
   51 00000048 2A09            CMP              R2,#9
   52 0000004A D014            BEQ              MaxNum
   53 0000004C         OutputChar
   54 0000004C FBB0 F1F4       UDIV             R1,R0,R4    ;R1 = number / powe
                                                            r
   55 00000050 FB04 F305       MUL              R3,R4,R5    ;R3 = power * 10
   56 00000054 FBB0 F3F3       UDIV             R3,R0,R3    ;R3 = number / (pow
                                                            er*10)
   57 00000058 FB03 F305       MUL              R3,R5       ;R3 = R3 * 10
   58 0000005C EBA1 0103       SUB              R1,R1,R3    ;R1 = R1 - R3
   59 00000060         
   60 00000060 B405            PUSH             {R0,R2}     ;save R0 and R2
   61 00000062 F101 0030       ADD              R0,R1,#0x30 ;R0 = R1 + 0x30 (fo
                                                            r number chars, fro
                                                            m ASCII table)
   62 00000066 F7FF FFFE       BL               ST7735_OutChar 
                                                            ;output char to lcd
                                                            
   63 0000006A BC05            POP              {R0,R2}     ;recover R0 and R2
   64 0000006C         
   65 0000006C FBB4 F4F5       UDIV             R4,R5       ;R4 = R4 / 10
   66 00000070 2C00            CMP              R4,#0       ;compare if it is e
                                                            nd of the sequence
   67 00000072 D1EB            BNE              OutputChar  ;if not then loop a
                                                            nd ourput chars
   68 00000074         
   69 00000074 BD3E            POP              {R1-R5,PC}  ;recover and exit
   70 00000076         
   71 00000076         MaxNum
   72 00000076 FBB0 F1F4       UDIV             R1,R0,R4    ;R1 = number / powe
                                                            r
   73 0000007A B405            PUSH             {R0,R2}     ;save R0 and R2
   74 0000007C F101 0030       ADD              R0,R1,#0x30 ;R0 = R1 + 0x30 (fo
                                                            r number chars, fro
                                                            m ASCII table)
   75 00000080 F7FF FFFE       BL               ST7735_OutChar 
                                                            ;output char to lcd
                                                            
   76 00000084 BC05            POP              {R0,R2}     ;recover R0 and R2
   77 00000086 FBB4 F4F5       UDIV             R4,R5       ;R4 = R4 / 10
   78 0000008A E7DF            B                OutputChar  ;go back
   79 0000008C         
   80 0000008C         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   81 0000008C         



ARM Macro Assembler    Page 3 


   82 0000008C         ; -----------------------LCD _OutFix--------------------
                       --
   83 0000008C         ; Output characters to LCD display in fixed-point format
                       
   84 0000008C         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
   85 0000008C         ; Inputs:  R0 is an unsigned 32-bit number
   86 0000008C         ; Outputs: none
   87 0000008C         ; E.g., R0=0,    then output "0.000 "
   88 0000008C         ;       R0=3,    then output "0.003 "
   89 0000008C         ;       R0=89,   then output "0.089 "
   90 0000008C         ;       R0=123,  then output "0.123 "
   91 0000008C         ;       R0=9999, then output "9.999 "
   92 0000008C         ;       R0>9999, then output "*.*** "
   93 0000008C         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   94 0000008C         ; R0 = the number
   95 0000008C         ; R1 = temp 
   96 0000008C         ; R2 = counter
   97 0000008C         ; R3 = 2nd temp
   98 0000008C         ; R4 = Powers (10^n)
   99 0000008C         ; R5 = 10
  100 0000008C         LCD_OutFix
  101 0000008C B53E            PUSH             {R1-R5,LR}  ;saving the registe
                                                            rs
  102 0000008E 4601            MOV              R1,R0       ;moving the number 
                                                            into R1 
  103 00000090 F04F 32FF       MOV              R2,#-1      ;initlize R2 for co
                                                            unting 
  104 00000094 F04F 050A       MOV              R5,#10      ;initlize the divid
                                                            er
  105 00000098         DivBy10_F
  106 00000098 F102 0201       ADD              R2,#1       ;increment R2 by 1
  107 0000009C FBB1 F1F5       UDIV             R1,R5       ;unsigned divide R1
                                                             = R1/R5
  108 000000A0 2900            CMP              R1, #0      ;check to see if ri
                                                            ched the limit
  109 000000A2 D1F9            BNE              DivBy10_F   ;loop till finished
                                                             counting 
  110 000000A4         
  111 000000A4 4C2D            LDR              R4, =Powers ;R4 = &Powers
  112 000000A6 EA4F 0182       LSL              R1,R2,#2    ;R1 = R2*4
  113 000000AA 590C            LDR              R4,[R1,R4]  ;R4 = Max power 
  114 000000AC         
  115 000000AC 2A03            CMP              R2,#3       ;compare to see if 
                                                            the number > 4 digi
                                                            t
  116 000000AE D841            BHI              NumLargerThan4Digit ;if higher 
                                                            then fill in with '
                                                            *'
  117 000000B0 D32A            BLO              FillInWithZeros ;if lower then 
                                                            add '0' till reach 
                                                            the limit
  118 000000B2         
  119 000000B2 FBB0 F1F4       UDIV             R1,R0,R4    ;R1 = number / powe
                                                            r
  120 000000B6 FB04 F305       MUL              R3,R4,R5    ;R3 = power * 10
  121 000000BA FBB0 F3F3       UDIV             R3,R0,R3    ;R3 = number / (pow
                                                            er*10)



ARM Macro Assembler    Page 4 


  122 000000BE FB03 F305       MUL              R3,R5       ;R3 = R3 * 10
  123 000000C2 EBA1 0103       SUB              R1,R1,R3    ;R1 = R1 - R3
  124 000000C6         
  125 000000C6 B405            PUSH             {R0,R2}     ;save R0 and R2
  126 000000C8 F101 0030       ADD              R0,R1,#0x30 ;R0 = R1 + 0x30 (fo
                                                            r number chars, fro
                                                            m ASCII table)
  127 000000CC F7FF FFFE       BL               ST7735_OutChar 
                                                            ;output char to lcd
                                                            
  128 000000D0 F04F 002E       MOV              R0,#0x2E    ;R0 = '.'
  129 000000D4 F7FF FFFE       BL               ST7735_OutChar 
                                                            ;output char to lcd
                                                            
  130 000000D8 BC05            POP              {R0,R2}     ;recover R0 and R2
  131 000000DA         
  132 000000DA FBB4 F4F5       UDIV             R4,R5       ;R4 = R4 / 10 
  133 000000DE         
  134 000000DE         OutputChar_F
  135 000000DE FBB0 F1F4       UDIV             R1,R0,R4    ;R1 = number / powe
                                                            r
  136 000000E2 FB04 F305       MUL              R3,R4,R5    ;R3 = power * 10
  137 000000E6 FBB0 F3F3       UDIV             R3,R0,R3    ;R3 = number / (pow
                                                            er*10)
  138 000000EA FB03 F305       MUL              R3,R5       ;R3 = R3 * 10
  139 000000EE EBA1 0103       SUB              R1,R1,R3    ;R1 = R1 - R3
  140 000000F2         
  141 000000F2 B405            PUSH             {R0,R2}     ;save R0 and R2
  142 000000F4 F101 0030       ADD              R0,R1,#0x30 ;R0 = R1 + 0x30 (fo
                                                            r number chars, fro
                                                            m ASCII table)
  143 000000F8 F7FF FFFE       BL               ST7735_OutChar 
                                                            ;output char to lcd
                                                            
  144 000000FC BC05            POP              {R0,R2}     ;recover R0 and R2
  145 000000FE         
  146 000000FE FBB4 F4F5       UDIV             R4,R5       ;R4 = R4 / 10
  147 00000102 2C00            CMP              R4,#0       ;compare if it is e
                                                            nd of the sequence
  148 00000104 D1EB            BNE              OutputChar_F ;if not then loop 
                                                            and ourput chars
  149 00000106         
  150 00000106 E027            B                Exit        ;exit
  151 00000108         
  152 00000108         FillInWithZeros
  153 00000108 B405            PUSH             {R0,R2}     ;save R0 and R2
  154 0000010A F04F 0030       MOV              R0,#0x30    ;R0 = '0'
  155 0000010E F7FF FFFE       BL               ST7735_OutChar 
                                                            ;output char to lcd
                                                            
  156 00000112 F04F 002E       MOV              R0,#0x2E    ;R0 = '.'
  157 00000116 F7FF FFFE       BL               ST7735_OutChar 
                                                            ;output char to lcd
                                                            
  158 0000011A BC05            POP              {R0,R2}     ;recover R0 and R2
  159 0000011C 4611            MOV              R1,R2       ;R1 = R2
  160 0000011E         LoopWriteZeros
  161 0000011E F101 0101       ADD              R1,#1       ;R1++
  162 00000122 2903            CMP              R1,#3       ;compare to see if 



ARM Macro Assembler    Page 5 


                                                            reach the limit
  163 00000124 D0DB            BEQ              OutputChar_F ;if true then go t
                                                            o output the number
                                                            
  164 00000126 B407            PUSH             {R0-R2}     ;save R0 and R2
  165 00000128 F04F 0030       MOV              R0,#0x30    ;R0 = '0'
  166 0000012C F7FF FFFE       BL               ST7735_OutChar 
                                                            ;output char to lcd
                                                            
  167 00000130 BC07            POP              {R0-R2}     ;recover R0 and R2
  168 00000132 E7F4            B                LoopWriteZeros ;loop till it re
                                                            ach the limit
  169 00000134         
  170 00000134         NumLargerThan4Digit
  171 00000134 F04F 0403       MOV              R4,#3       ;R4 = 3
  172 00000138 F04F 002A       MOV              R0,#0x2A    ;R0 = '*'
  173 0000013C F7FF FFFE       BL               ST7735_OutChar 
                                                            ;output char to lcd
                                                            
  174 00000140 F04F 002E       MOV              R0,#0x2E    ;R0 = '.'
  175 00000144 F7FF FFFE       BL               ST7735_OutChar 
                                                            ;output char to lcd
                                                            
  176 00000148         LoopAsterisk
  177 00000148 F1A4 0401       SUB              R4,#1       ;R4--
  178 0000014C F04F 002A       MOV              R0,#0x2A    ;R0 = '*'
  179 00000150 F7FF FFFE       BL               ST7735_OutChar 
                                                            ;output char to lcd
                                                            
  180 00000154 2C00            CMP              R4,#0       ;compare with 0
  181 00000156 D1F7            BNE              LoopAsterisk ;if not true then 
                                                            loop
  182 00000158         Exit
  183 00000158 BD3E            POP              {R1-R5,PC}  ;recover and exit
  184 0000015A         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  185 0000015A         
  186 0000015A 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  187 0000015C                 END                          ; end of file
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 18 in file Print.s
   Uses
      None
Comment: .text unused
DivBy10 00000034

Symbol: DivBy10
   Definitions
      At line 41 in file Print.s
   Uses
      At line 45 in file Print.s
Comment: DivBy10 used once
DivBy10_F 00000098

Symbol: DivBy10_F
   Definitions
      At line 105 in file Print.s
   Uses
      At line 109 in file Print.s
Comment: DivBy10_F used once
Exit 00000158

Symbol: Exit
   Definitions
      At line 182 in file Print.s
   Uses
      At line 150 in file Print.s
Comment: Exit used once
FillInWithZeros 00000108

Symbol: FillInWithZeros
   Definitions
      At line 152 in file Print.s
   Uses
      At line 117 in file Print.s
Comment: FillInWithZeros used once
LCD_OutDec 00000028

Symbol: LCD_OutDec
   Definitions
      At line 36 in file Print.s
   Uses
      At line 14 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 0000008C

Symbol: LCD_OutFix
   Definitions
      At line 100 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
LoopAsterisk 00000148

Symbol: LoopAsterisk



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 176 in file Print.s
   Uses
      At line 181 in file Print.s
Comment: LoopAsterisk used once
LoopWriteZeros 0000011E

Symbol: LoopWriteZeros
   Definitions
      At line 160 in file Print.s
   Uses
      At line 168 in file Print.s
Comment: LoopWriteZeros used once
MaxNum 00000076

Symbol: MaxNum
   Definitions
      At line 71 in file Print.s
   Uses
      At line 52 in file Print.s
Comment: MaxNum used once
NumLargerThan4Digit 00000134

Symbol: NumLargerThan4Digit
   Definitions
      At line 170 in file Print.s
   Uses
      At line 116 in file Print.s
Comment: NumLargerThan4Digit used once
OutputChar 0000004C

Symbol: OutputChar
   Definitions
      At line 53 in file Print.s
   Uses
      At line 67 in file Print.s
      At line 78 in file Print.s

OutputChar_F 000000DE

Symbol: OutputChar_F
   Definitions
      At line 134 in file Print.s
   Uses
      At line 148 in file Print.s
      At line 163 in file Print.s

Powers 00000000

Symbol: Powers
   Definitions
      At line 21 in file Print.s
   Uses
      At line 47 in file Print.s
      At line 111 in file Print.s

14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 62 in file Print.s
      At line 75 in file Print.s
      At line 127 in file Print.s
      At line 129 in file Print.s
      At line 143 in file Print.s
      At line 155 in file Print.s
      At line 157 in file Print.s
      At line 166 in file Print.s
      At line 173 in file Print.s
      At line 175 in file Print.s
      At line 179 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
349 symbols in table
